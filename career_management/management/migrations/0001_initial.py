# Generated by Django 5.1.7 on 2025-05-30 13:12

import django.core.validators
import django.db.models.deletion
import management.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Competence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255, unique=True)),
                ('categorie', models.CharField(default='Technique', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='CyberEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('lieu', models.CharField(blank=True, max_length=255, null=True)),
                ('url', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Ouvrier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('prenom', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('date_naissance', models.DateField(blank=True, null=True)),
                ('performance', models.IntegerField(blank=True, help_text='Note de performance entre 1 et 5', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to=management.models.CustomUser.user_profile_picture_path)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Employe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('poste', models.CharField(blank=True, max_length=255, null=True)),
                ('equipe', models.CharField(blank=True, max_length=255, null=True)),
                ('competences', models.JSONField(blank=True, default=dict)),
                ('formulaire', models.JSONField(blank=True, default=dict)),
                ('date_join', models.DateField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=255)),
                ('employe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certifications', to='management.employe')),
            ],
        ),
        migrations.CreateModel(
            name='Evenement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('date', models.DateField()),
                ('lieu', models.CharField(max_length=255)),
                ('participants', models.ManyToManyField(blank=True, related_name='evenements_participes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='employe',
            name='evenements',
            field=models.ManyToManyField(blank=True, related_name='employes', to='management.evenement'),
        ),
        migrations.CreateModel(
            name='Formation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('date', models.DateField()),
                ('duree', models.IntegerField()),
                ('participants', models.ManyToManyField(blank=True, related_name='formations_participees', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='employe',
            name='formations',
            field=models.ManyToManyField(blank=True, related_name='employes', to='management.formation'),
        ),
        migrations.CreateModel(
            name='FormationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('formation_title', models.CharField(max_length=255)),
                ('formation_date', models.DateField()),
                ('formation_url', models.URLField(blank=True, null=True)),
                ('formation_type', models.CharField(choices=[('formation', 'Formation')], max_length=10)),
                ('formation_budget', models.DecimalField(decimal_places=2, help_text='Budget demandé pour la formation', max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuvée'), ('rejected', 'Rejetée')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formation_requests', to='management.employe')),
            ],
            options={
                'verbose_name': 'Demande de formation',
                'verbose_name_plural': 'Demandes de formation',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='formulaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competences', models.JSONField(blank=True, default=list)),
                ('certifications', models.JSONField(blank=True, default=list)),
                ('date_acquisition', models.DateField()),
                ('niveaux_etude', models.CharField(blank=True, choices=[('bac', 'Bac'), ('licence', 'Licence'), ('master', 'Master'), ('ingenieur', 'Ingénieur'), ('doctorat', 'Doctorat')], max_length=100)),
                ('soft_skills_dominante', models.CharField(blank=True, max_length=100)),
                ('a_visa', models.BooleanField(default=False)),
                ('date_debut_visa', models.DateField(blank=True, null=True)),
                ('date_fin_visa', models.DateField(blank=True, null=True)),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formulaires', to='management.employe')),
            ],
        ),
        migrations.CreateModel(
            name='HistoriqueParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_participation', models.CharField(choices=[('formation', 'Formation'), ('evenement', 'Événement')], max_length=10)),
                ('titre', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('date', models.DateField()),
                ('lieu', models.CharField(blank=True, max_length=255, null=True)),
                ('budget', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('statut', models.CharField(default='Affecté', max_length=50)),
                ('source', models.CharField(default='Affectation Admin', max_length=100)),
                ('date_enregistrement', models.DateTimeField(auto_now_add=True)),
                ('employe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historique', to='management.employe')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('employe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='management.employe')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ParticipationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_title', models.CharField(max_length=255)),
                ('event_date', models.DateField()),
                ('event_url', models.URLField(blank=True, null=True)),
                ('event_type', models.CharField(choices=[('event', 'Événement')], max_length=10)),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuvée'), ('rejected', 'Rejetée')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('cyber_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='management.cyberevent')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participation_requests', to='management.employe')),
            ],
            options={
                'verbose_name': 'Demande de participation',
                'verbose_name_plural': 'Demandes de participation',
                'ordering': ['-created_at'],
            },
        ),
    ]
